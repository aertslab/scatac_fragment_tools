[build-system]
requires = ["maturin>=1.4,<2.0"]
build-backend = "maturin"

[project]
name = "scatac_fragment_tools"
description = "Tools for working with scATAC-seq fragment files."
readme = "README.md"
keywords = ["scATAC-seq", "scATAC", "fragment files"]
requires-python = ">=3.8"
classifiers = [
  "Programming Language :: Rust",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dynamic = ["version"]
dependencies = [
  "numpy",
  "pyBigWig",
  "pybigtools",
  "polars",
  "pyarrow",
  "numba",
  "rich-argparse",
  "joblib",
]

[project.urls]
homepage = "https://github.com/aertslab/scatac_fragment_tools/"
documentation = "https://aertslab.github.io/scatac_fragment_tools/"
repository = "https://github.com/aertslab/scatac_fragment_tools/"
changelog = "https://raw.githubusercontent.com/aertslab/scatac_fragment_tools/CHANGELOG.md"

[project.optional-dependencies]
development = [
  "mypy",
  "ruff",
  "pytest",
]

[project.scripts]
scatac_fragment_tools = "scatac_fragment_tools.cli.main:main"

[tool.maturin]
features = ["pyo3/extension-module"]
module-name = "scatac_fragment_tools._rust_scatac_fragment_tools"

[tool.ruff]
target-version = "py38"
line-length = 88
# fix = true

select = [
  "E", # pycodestyle
  "W", # pycodestyle
  "F", # Pyflakes
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "D", # flake8-docstrings
  "I", # isort
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "Q", # flake8-quotes
  "UP", # pyupgrade
  "PT", # flake8-pytest-style
  "RUF", # Ruff-specific rules
]

ignore = [
  # Line length regulated by black
  "E501",
  # pydocstyle: http://www.pydocstyle.org/en/stable/error_codes.html
  # numpy convention with a few additional lints
  "D107",
  "D203",
  "D212",
  "D401",
  "D402",
  "D415",
  "D416",
  # flake8-pytest-style:
  "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
  # flake8-simplify
  "SIM102", # Use a single `if` statement instead of nested `if` statements
  # ruff
  "RUF005", # unpack-instead-of-concatenating-to-collection-literal
  # pycodestyle
  # TODO: Remove errors below to further improve docstring linting
  # Ordered from most common to least common errors.
  "D105",
  "D100",
  "D103",
  "D102",
  "D104",
  "D101",
]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.pycodestyle]
max-doc-length = 88

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [
  "tests",
]
addopts = "--verbose"
